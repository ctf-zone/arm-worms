{"version":3,"sources":["index.js"],"names":["colors","mslc","color","short","TSG","mhackeroni","Bushwhackers","p4","document","getElementById","addEventListener","speed","parseInt","value","initFunc","graphMap","replay","UUID","armNodes","miningNodes","teamsScores","timeoutCheckUUID","URLstring","window","location","href","url","URL","checkUUID","searchParams","get","savedUUID","getMap","a","gameId","axios","then","data","getReplay","getUUID","clearTimeout","undefined","reload","setTimeout","drawTeamRect","node","ctx","bckgDimensions","label","fillStyle","id","team_name","fillRect","x","y","textAlign","textBaseline","fillText","drawTeamNode","teamName","fontSize","font","textWidth","measureText","width","map","n","bckgDimensionsMining","drawMiningAreal","myGraph","ForceGraph","delay","ms","Promise","resolve","asyncForEach","array","callback","delayK","index","length","Array","isArray","forEach","team","set","score","current_score","sortedList","from","values","sort","b","i","el","getElementsByClassName","style","innerHTML","Map","nodes","Object","keys","offsetWidth","height","offsetHeight","d3AlphaDecay","d3VelocityDecay","cooldownTicks","warmupTicks","nodeColor","nodeRelSize","linkColor","link","linkDirectionalParticleColor","linkDirectionalParticleWidth","nodeCanvasObject","globalScale","beginPath","arc","Math","PI","fill","backgroundColor","graphData","d3Force","distance","zoom","round","target","mining","source","emittedLink","links","find","pushParticle"],"mappings":"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","file":"static/js/main.569f90ae.chunk.js","sourcesContent":["import ForceGraph from 'force-graph';\nimport axios from 'axios';\nimport constMap from './map';\nimport constReplay from './replay';\nimport './index.css';\n\nconst colors = {\n  mslc: {\n    color: '#e04a3f',\n    short: 'LC',\n  }, //red\n  TSG: {\n    color: '#fa01af',\n    short: 'TG',\n  }, //blue\n  mhackeroni: {\n    color: '#e5b946',\n    short: 'MI',\n  }, //green\n  Bushwhackers: {\n    color: '#78b353',\n    short: 'BS',\n  }, //yellow\n  'Tea Deliverers': {\n    color: '#02ec00',\n    short: 'TD',\n  },\n  p4: {\n    color: '#075cff',\n    short: 'P4',\n  },\n  'perfect blue': {\n    color: '#6686e3',\n    short: 'PB',\n  }, //pink\n  '地松鼠.PAS': {\n    color: '#a963ba',\n    short: 'SP',\n  },\n  'Dragon Sector': {\n    color: '#00d6d8',\n    short: 'DS',\n  },\n  'A*0*E': {\n    color: '#864d00',\n    short: 'A0E',\n  },\n};\n\ndocument.getElementById('reset').addEventListener('click', () => {\n  speed = parseInt(document.getElementById('speed').value);\n  initFunc();\n});\n\nlet graphMap,\n  replay,\n  UUID,\n  armNodes,\n  miningNodes,\n  teamsScores,\n  timeoutCheckUUID,\n  speed = 10;\n\nconst URLstring = window.location.href; //window.location.href\nconst url = new URL(URLstring);\nconst checkUUID = url.searchParams.get('check');\nconst savedUUID = url.searchParams.get('uuid');\n\nconst getMap = async () => {\n  const gameId = savedUUID ? savedUUID : UUID;\n  return await axios.get(`/api/json_map/${gameId}`).then(({ data }) => {\n    return data;\n  });\n};\n\nconst getReplay = async () => {\n  const gameId = savedUUID ? savedUUID : UUID;\n  return await axios.get(`/api/json_replay/${gameId}`).then(({ data }) => {\n    return data;\n  });\n};\n\nconst getUUID = async () => {\n  clearTimeout(timeoutCheckUUID);\n  await axios.get(`/api/get_last_uuid`).then(({ data }) => {\n    if (UUID !== data && UUID !== undefined) {\n      document.location.reload(true);\n    }\n    UUID = data;\n    if (checkUUID !== 'true') {\n      timeoutCheckUUID = setTimeout(function () {\n        getUUID();\n      }, 10 * 1000);\n    }\n  });\n};\n\nconst drawMiningAreal = (node, ctx, textWidth, fontSize, bckgDimensions) => {\n  const bckgDimensionsMining = [textWidth, fontSize].map(\n    (n) => n + fontSize * 1 + 30\n  );\n\n  ctx.fillStyle = '#FFF';\n  ctx.fillRect(\n    node.x - bckgDimensions[0] / 2 - 15,\n    node.y - bckgDimensions[1] / 2 - 15,\n    ...bckgDimensionsMining\n  );\n};\n\nconst drawTeamRect = (node, ctx, bckgDimensions, label) => {\n  ctx.fillStyle = colors[armNodes.get(node.id).team_name].color;\n  ctx.fillRect(\n    node.x - bckgDimensions[0] / 2,\n    node.y - bckgDimensions[1] / 2,\n    ...bckgDimensions\n  );\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillStyle = '#000';\n  ctx.fillText(label, node.x, node.y);\n};\n\nconst drawTeamNode = (node, ctx, label, teamName) => {\n  const fontSize = 36;\n  ctx.font = `${fontSize}px Sans-Serif`;\n  const textWidth = ctx.measureText(label).width;\n  const bckgDimensions = [textWidth, fontSize].map((n) => n + fontSize * 1);\n\n  if (\n    miningNodes.get(teamName) !== undefined &&\n    miningNodes.get(teamName).id === node.id\n  ) {\n    drawMiningAreal(node, ctx, textWidth, fontSize, bckgDimensions);\n    drawTeamRect(node, ctx, bckgDimensions, label);\n  } else {\n    drawTeamRect(node, ctx, bckgDimensions, label);\n  }\n};\n\nvar myGraph = ForceGraph();\n\nconst drawGraph = (data) => {\n  myGraph(document.getElementById('graph'))\n    .width(document.getElementById('graph').offsetWidth - 4)\n    .height(document.getElementById('graph').offsetHeight - 4)\n    .d3AlphaDecay(0.000003)\n    .d3VelocityDecay(0.000003)\n    .cooldownTicks(0)\n    .warmupTicks(10000)\n    .nodeColor((node) => {\n      return armNodes.get(node.id).team_name ? 'transparent' : '#FFF';\n    })\n    .nodeRelSize(15)\n    .linkColor((link) => '#4d4d4d')\n    .linkDirectionalParticleColor((link) => link.color || '#FFF')\n    .linkDirectionalParticleWidth(10)\n    .nodeCanvasObject((node, ctx, globalScale) => {\n      if (node.team_name !== '') {\n        const label = colors[node.team_name].short;\n        const teamName = node.team_name;\n        return drawTeamNode(node, ctx, label, teamName);\n      }\n      if (armNodes.get(node.id).team_name) {\n        const label = colors[armNodes.get(node.id).team_name].short;\n        const teamName = armNodes.get(node.id).team_name;\n        return drawTeamNode(node, ctx, label, teamName);\n      }\n      ctx.fillStyle = '#FFF';\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, 15, 0, 2 * Math.PI, false);\n      ctx.fill();\n    })\n    .backgroundColor('#20232a')\n    .graphData(data);\n\n  myGraph.d3Force('link').distance((link) => 500);\n  myGraph.zoom(0.25);\n};\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst asyncForEach = async (array, callback, delayK) => {\n  for (let index = 0; index < array.length; index++) {\n    if (array.length > 10 && Array.isArray(array[0])) {\n      array[index].forEach((team) =>\n        teamsScores.set(team.team_name, {\n          team_name: team.team_name,\n          score: team.current_score,\n        })\n      );\n      const sortedList = Array.from(teamsScores.values()).sort(\n        (a, b) => b.score - a.score\n      );\n      if (index % 10 === 0) {\n        for (let i = 0; i < 10; i++) {\n          const el = document.getElementsByClassName('place')[i];\n          el.style.color = '#FFF';\n          el.innerHTML = `<span style=\"color: ${\n            sortedList[i] ? colors[sortedList[i].team_name].color : '#FFF'\n          }\">${\n            sortedList[i] ? sortedList[i].team_name : `Team${i}`\n          }</span> Scores: ${sortedList[i] ? sortedList[i].score : 0}`;\n        }\n      }\n    }\n    if (array[index].length !== 0) {\n      await delay(delayK);\n      await callback(array[index]);\n    }\n  }\n};\n\nconst initFunc = async () => {\n  if (!savedUUID) {\n    await getUUID();\n  }\n  graphMap = await getMap();\n  // graphMap = constMap;\n  replay = await getReplay();\n  // replay = constReplay;\n\n  armNodes = new Map(graphMap.nodes.map((node) => [node.id, { ...node }]));\n\n  // miningNodes = new Map(\n  //   graphMap.nodes.map((node) => [node.id, { ...node, mining: 0 }])\n  // );\n\n  miningNodes = new Map();\n\n  teamsScores = new Map(\n    Object.keys(colors).map((team) => [team, { team_name: team, score: 0 }])\n  );\n\n  await drawGraph(graphMap);\n  if (replay.length !== 0) {\n    await asyncForEach(\n      replay,\n      (round) => {\n        // round.forEach(async ({ target, mining, source, team_name }) => {\n        asyncForEach(\n          round,\n          async ({ target, mining, source, team_name }) => {\n            const emittedLink = graphMap.links.find(\n              (link) => link.source.id === source && link.target.id === target\n            );\n            if (mining !== 1) {\n              myGraph.pushParticle(\n                emittedLink.source.id,\n                emittedLink.target.id,\n                {\n                  speed: speed <= 100 ? 0.1 : 10 / speed,\n                  color: colors[team_name].color,\n                }\n              );\n              await delay(speed / 10);\n              armNodes.set(target, { ...armNodes.get(target), team_name });\n            } else {\n              miningNodes.set(team_name, {\n                id: source,\n              });\n            }\n          },\n          speed\n        );\n\n        // });\n      },\n      speed\n    );\n  }\n};\n\ninitFunc();\n"],"sourceRoot":""}